import * as readline from "readline";
import * as process from "process";
import * as chalk from "chalk";

import { SQSClient, SendMessageCommand } from "@aws-sdk/client-sqs";

// generated by `npx cdk deploy --outputs-file ./cdk-outputs.json`
import { SqsToDynamoStack } from "../cdk-outputs.json";

const client = new SQSClient({});

const queueURL = SqsToDynamoStack.queueUrl;

/**
 * This function will send N~ messages to SQS
 */
const main = async () => {
  let count: number | string = process.argv[2];
  if (!count || typeof parseInt(count) !== "number") {
    console.warn("Provide a number");
    process.exit(1);
  }
  count = parseInt(count);

  console.log(chalk.gray(`ðŸš€ Sending ${count} operations to SQS...`));

  let itemCount = 0;
  let errorCount = 0;
  let err: Error | null = null;

  try {
    const sendMessageCommand = new SendMessageCommand({
      MessageBody: JSON.stringify({ date: new Date().toISOString() }),
      QueueUrl: queueURL,
    });

    const proms = Array(count)
      .fill(null)
      .map((_, __, arr) =>
        client
          .send(sendMessageCommand)
          .catch((e) => {
            errorCount += 1;
            err = e; // grab any error to be printed
          })
          .finally(() => {
            (itemCount += 1), readline.cursorTo(process.stdout, 0);
            process.stdout.write(
              `Progress: ${chalk.yellow(itemCount)}/${chalk.blue(arr.length)}, Errors: ${chalk.red(
                errorCount
              )}`
            );
            if (itemCount === arr.length) process.stdout.write("\n");
          })
      );

    await Promise.all(proms);
  } finally {
    err && console.error(err);
    console.log(chalk.green("âœ¨ Done"));
  }
};

main();
