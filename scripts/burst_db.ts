import * as readline from "readline";
import * as process from "process";
import * as chalk from "chalk";

import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient, UpdateCommand } from "@aws-sdk/lib-dynamodb";

// generated by `npx cdk deploy --outputs-file ./cdk-outputs.json`
import { SqsToDynamoStack } from "../cdk-outputs.json";

const ddbClient = new DynamoDBClient({});
const docClient = DynamoDBDocumentClient.from(ddbClient);

const tableName = SqsToDynamoStack.tableName;

/**
 * This function will send N~ update requests to dynamo and attempt to
 * increment the `count` attribute on a single partition key.
 *
 * If 20,000 requests are sent, the expected outcome is that
 * the count will be 20,000, representing the 20,000 successful operations.
 *
 * But in reality, count ends up being around 19,972 due to throttling.
 *
 * This is known as a "hot partition".
 * @see https://aws.amazon.com/premiumsupport/knowledge-center/dynamodb-table-throttled/
 */
const main = async () => {
  let count: number | string = process.argv[2];
  if (!count || typeof parseInt(count) !== "number") {
    console.warn("Provide a number");
    process.exit(1);
  }
  count = parseInt(count);

  console.log(chalk.gray(`ðŸš€ Sending ${count} operations to DDB...`));

  let itemCount = 0;
  let errorCount = 0;
  let err: Error | null = null;

  try {
    const updateCommand = new UpdateCommand({
      TableName: tableName,
      Key: { pk: "hot-parition" },
      UpdateExpression: "SET #count = if_not_exists(#count, :zero) + :incr",
      ExpressionAttributeNames: { "#count": "count" },
      ExpressionAttributeValues: { ":incr": 1, ":zero": 0 },
    });

    const commands = Array(count)
      .fill(null)
      .map((_, __, arr) => {
        return docClient
          .send(updateCommand)
          .catch((e) => {
            errorCount += 1;
            err = e; // grab any error to be printed
          })
          .finally(() => {
            itemCount += 1;
            readline.cursorTo(process.stdout, 0);
            process.stdout.write(
              `Progress: ${chalk.yellow(itemCount)}/${chalk.blue(arr.length)}, Errors: ${chalk.red(
                errorCount
              )}`
            );
            if (itemCount === arr.length) process.stdout.write("\n");
          });
      });

    await Promise.all(commands);
  } finally {
    err && console.error(err);
    console.log(chalk.green("âœ¨ Done"));
  }
};

main();
